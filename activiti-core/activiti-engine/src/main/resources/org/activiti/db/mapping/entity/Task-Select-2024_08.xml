<?xml version="1.0" encoding="UTF-8" ?>

<!--
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->


<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.activiti.engine.impl.persistence.entity.TaskEntityImpl">
  <!-- TASK SELECT -->

  <!-- optimized script (without joins) -->
  <sql id="withoutJoins_selectTaskByQueryCriteria">
    select *
    <include refid="withoutJoins_selectTaskByQueryCriteriaSql"/>
    <choose>
      <!--
        ${limitAfter} on mssql/oracle has more than just "order by" statement
        Because that property is applied to several SQL statements,
          we need to make a workaround here
      -->
      <when test="'${limitAfter}' != null and _databaseId != 'mssql' and _databaseId != 'oracle'">
        ORDER BY rnk
        ${limitAfter}
      </when>
      <otherwise>
        WHERE rnk &gt;= #{firstRow} AND rnk &lt; #{lastRow}
        ORDER BY rnk
      </otherwise>
    </choose>
  </sql>
  <sql id="withoutJoins_selectTaskByQueryCriteriaSql">
    FROM (
      SELECT RES.*, row_number() OVER (ORDER BY ${orderByColumns}) rnk
      FROM ACT_RU_TASK RES
      <where>
        <if test="taskId != null">
          RES.ID_ = #{taskId}
        </if>
        <if test="name != null">
          and RES.NAME_ = #{name}
        </if>
        <if test="nameLike != null">
          and RES.NAME_ like #{nameLike}${wildcardEscapeClause}
        </if>
        <if test="nameLikeIgnoreCase != null">
          and lower(RES.NAME_) like #{nameLikeIgnoreCase}${wildcardEscapeClause}
        </if>
        <if test="nameList != null &amp;&amp; nameList.size() &gt; 0">
          and RES.NAME_ IN
          <foreach item="name" index="index" collection="nameList"
                   open="(" separator="," close=")">
            #{name}
          </foreach>
        </if>
        <if test="nameListIgnoreCase != null &amp;&amp; nameListIgnoreCase.size() &gt; 0">
          and lower(RES.NAME_) IN
          <foreach item="name" index="index" collection="nameListIgnoreCase"
                   open="(" separator="," close=")">
            #{name}
          </foreach>
        </if>
        <if test="description != null">
          and RES.DESCRIPTION_ = #{description}
        </if>
        <if test="descriptionLike != null">
          and RES.DESCRIPTION_ like #{descriptionLike}${wildcardEscapeClause}
        </if>
        <if test="descriptionLikeIgnoreCase != null">
          and lower(RES.DESCRIPTION_) like #{descriptionLikeIgnoreCase}${wildcardEscapeClause}
        </if>
        <if test="priority != null">
          and RES.PRIORITY_ = #{priority}
        </if>
        <if test="minPriority != null">
          and RES.PRIORITY_ &gt;= #{minPriority}
        </if>
        <if test="maxPriority != null">
          and RES.PRIORITY_ &lt;= #{maxPriority}
        </if>
        <if test="assignee != null">
          and RES.ASSIGNEE_ = #{assignee}
        </if>
        <if test="assigneeLike != null">
          and RES.ASSIGNEE_ like #{assigneeLike}${wildcardEscapeClause}
        </if>
        <if test="assigneeLikeIgnoreCase != null">
          and lower(RES.ASSIGNEE_) like #{assigneeLikeIgnoreCase}${wildcardEscapeClause}
        </if>
        <if test="assigneeIds != null &amp;&amp; assigneeIds.size() &gt; 0">
          and RES.ASSIGNEE_ IN
          <foreach item="assigneeId" index="index" collection="assigneeIds"
                   open="(" separator="," close=")">
            #{assigneeId}
          </foreach>
        </if>
        <if test="owner != null">
          and RES.OWNER_ = #{owner}
        </if>
        <if test="ownerLike != null">
          and RES.OWNER_ like #{ownerLike}${wildcardEscapeClause}
        </if>
        <if test="ownerLikeIgnoreCase != null">
          and lower(RES.OWNER_) like #{ownerLikeIgnoreCase}${wildcardEscapeClause}
        </if>
        <if test="unassigned">
          and RES.ASSIGNEE_ IS NULL
        </if>
        <if test="taskParentTaskId != null">
          and RES.PARENT_TASK_ID_ = #{taskParentTaskId}
        </if>
        <if test="noDelegationState">
          and RES.DELEGATION_ IS NULL
        </if>
        <if test="delegationState != null">
          and RES.DELEGATION_ = #{delegationStateString}
        </if>
        <if test="processInstanceId != null">
          and RES.PROC_INST_ID_ = #{processInstanceId}
        </if>
        <if test="processInstanceIds != null &amp;&amp; processInstanceIds.size() &gt; 0">
          and RES.PROC_INST_ID_ IN
          <foreach item="processInstance" index="index" collection="processInstanceIds"
                   open="(" separator="," close=")">
            #{processInstance}
          </foreach>
        </if>
        <if test="processInstanceBusinessKey != null">
          and <include refid="withoutJoins_selectExists">
          <property name="externalTable" value="${prefix}ACT_RU_EXECUTION E"/>
          <property name="join" value="RES.PROC_INST_ID_ = E.ID_"/>
          <property name="where" value="E.BUSINESS_KEY_ = #{processInstanceBusinessKey}"/>
        </include>
        </if>
        <if test="processInstanceBusinessKeyLike != null">
          and <include refid="withoutJoins_selectExists">
          <property name="externalTable" value="${prefix}ACT_RU_EXECUTION E"/>
          <property name="join" value="RES.PROC_INST_ID_ = E.ID_"/>
          <property name="where" value="E.BUSINESS_KEY_ like #{processInstanceBusinessKeyLike}${wildcardEscapeClause}"/>
        </include>
        </if>
        <if test="processInstanceBusinessKeyLikeIgnoreCase != null">
          and <include refid="withoutJoins_selectExists">
          <property name="externalTable" value="${prefix}ACT_RU_EXECUTION E"/>
          <property name="join" value="RES.PROC_INST_ID_ = E.ID_"/>
          <property name="where" value="lower(E.BUSINESS_KEY_) like #{processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}"/>
        </include>
        </if>
        <if test="executionId != null">
          and RES.EXECUTION_ID_ = #{executionId}
        </if>
        <if test="createTime != null">
          and RES.CREATE_TIME_ = #{createTime}
        </if>
        <if test="createTimeBefore != null">
          and RES.CREATE_TIME_ &lt; #{createTimeBefore}
        </if>
        <if test="createTimeAfter != null">
          and RES.CREATE_TIME_ &gt; #{createTimeAfter}
        </if>
        <if test="key != null">
          and RES.TASK_DEF_KEY_ = #{key}
        </if>
        <if test="keyLike != null">
          and RES.TASK_DEF_KEY_ like #{keyLike}${wildcardEscapeClause}
        </if>
        <if test="processDefinitionId != null">
          and RES.PROC_DEF_ID_ = #{processDefinitionId}
        </if>
        <if test="processDefinitionKey != null">
          and <include refid="withoutJoins_selectExists">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D"/>
            <property name="join" value="RES.PROC_DEF_ID_ = D.ID_"/>
            <property name="where" value="D.KEY_ = #{processDefinitionKey}"/>
          </include>
        </if>
        <if test="processDefinitionKeyLike != null">
          and <include refid="withoutJoins_selectExists">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D"/>
            <property name="join" value="RES.PROC_DEF_ID_ = D.ID_"/>
            <property name="where" value="D.KEY_ like #{processDefinitionKeyLike}${wildcardEscapeClause}"/>
          </include>
        </if>
        <if test="processDefinitionKeyLikeIgnoreCase != null">
          and <include refid="withoutJoins_selectExists">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D"/>
            <property name="join" value="RES.PROC_DEF_ID_ = D.ID_"/>
            <property name="where" value="lower(D.KEY_) like #{processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}"/>
          </include>
        </if>
        <if test="processDefinitionKeys != null &amp;&amp; processDefinitionKeys.size() &gt; 0">
          and <include refid="withoutJoins_selectExistsIn">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D"/>
            <property name="join" value="RES.PROC_DEF_ID_ = D.ID_"/>
            <property name="field" value="D.KEY_"/>
            <property name="collection" value="processDefinitionKeys"/>
          </include>
        </if>
        <if test="processDefinitionName != null">
          and <include refid="withoutJoins_selectExists">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D"/>
            <property name="join" value="RES.PROC_DEF_ID_ = D.ID_"/>
            <property name="where" value="D.NAME_ = #{processDefinitionName}"/>
          </include>
        </if>
        <if test="processDefinitionNameLike != null">
          and <include refid="withoutJoins_selectExists">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D"/>
            <property name="join" value="RES.PROC_DEF_ID_ = D.ID_"/>
            <property name="where" value="D.NAME_ like #{processDefinitionNameLike}${wildcardEscapeClause}"/>
          </include>
        </if>
        <if test="processCategoryInList != null &amp;&amp; processCategoryInList.size() &gt; 0">
          and <include refid="withoutJoins_selectExistsIn">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D"/>
            <property name="join" value="RES.PROC_DEF_ID_ = D.ID_"/>
            <property name="field" value="D.CATEGORY_"/>
            <property name="collection" value="processCategoryInList"/>
          </include>
        </if>
        <if test="processCategoryNotInList != null &amp;&amp; processCategoryNotInList.size() &gt; 0">
          and <include refid="withoutJoins_selectExistsNotIn">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D"/>
            <property name="join" value="RES.PROC_DEF_ID_ = D.ID_"/>
            <property name="field" value="D.CATEGORY_"/>
            <property name="collection" value="processCategoryNotInList"/>
          </include>
        </if>
        <if test="deploymentId != null">
          and <include refid="withoutJoins_selectExists">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF DEPLOY_P"/>
            <property name="join" value="RES.PROC_DEF_ID_ = DEPLOY_P.ID_"/>
            <property name="where" value="DEPLOY_P.DEPLOYMENT_ID_ = #{deploymentId}"/>
          </include>
        </if>
        <if test="deploymentIds != null &amp;&amp; deploymentIds.size() &gt; 0">
          and <include refid="withoutJoins_selectExistsIn">
            <property name="externalTable" value="${prefix}ACT_RE_PROCDEF DEPLOY_P"/>
            <property name="join" value="RES.PROC_DEF_ID_ = DEPLOY_P.ID_"/>
            <property name="field" value="DEPLOY_P.DEPLOYMENT_ID_"/>
            <property name="collection" value="deploymentIds"/>
          </include>
        </if>
        <if test="dueDate != null">
          and RES.DUE_DATE_ = #{dueDate}
        </if>
        <if test="dueBefore != null">
          and RES.DUE_DATE_ &lt; #{dueBefore}
        </if>
        <if test="dueAfter != null">
          and RES.DUE_DATE_ &gt; #{dueAfter}
        </if>
        <if test="withoutDueDate">
          and RES.DUE_DATE_ is null
        </if>
        <if test="dueDate != null || dueBefore != null || dueAfter != null">
          and RES.DUE_DATE_ is not null
        </if>
        <if test="category != null">
          and RES.CATEGORY_ = #{category}
        </if>
        <if test="excludeSubtasks">
          and RES.PARENT_TASK_ID_ IS NULL
        </if>
        <if test="!bothCandidateAndAssigned &amp;&amp; (candidateUser != null || candidateGroups != null)">
          and exists (
            select 1
            from ${prefix}ACT_RU_IDENTITYLINK I
            where
              I.TASK_ID_ = RES.ID_
              and RES.ASSIGNEE_ is null
              and I.TYPE_ = 'candidate'
              and (
                <if test="candidateUser != null">
                  I.USER_ID_ = #{candidateUser}
                </if>
                <if test="candidateUser != null &amp;&amp; candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
                  or
                </if>
                <if test="candidateGroups != null &amp;&amp; candidateGroups.size() &gt; 0">
            I.GROUP_ID_ IN
            <foreach item="group" index="index" collection="candidateGroups"
                     open="(" separator="," close=")">
              #{group}
            </foreach>
          </if>
              )
          )
        </if>
        <if test="involvedUser != null">
          and (
            exists (
              select 1
              from ${prefix}ACT_RU_IDENTITYLINK LINK
              where
                LINK.TASK_ID_ = RES.ID_
                and LINK.USER_ID_ = #{involvedUser}
            )
            or RES.ASSIGNEE_ = #{involvedUser}
            or RES.OWNER_ = #{involvedUser}
          )
        </if>
        <if test="involvedGroups != null &amp;&amp; involvedGroups.size() &gt; 0">
          and exists (
            select 1
            from ${prefix}ACT_RU_IDENTITYLINK I
            where
              I.TASK_ID_ = RES.ID_
              and I.TYPE_ = 'participant'
              and I.GROUP_ID_ IN
              <foreach item="group" index="index" collection="involvedGroups" open="(" separator="," close=")">
            #{group}
          </foreach>
          )
        </if>
        <foreach item="var" collection="queryVariableValues" index="index">
          and
          <trim prefix="(" prefixOverrides="AND" suffix=")">
            exists (
              select 1
              from ${prefix}ACT_RU_VARIABLE A${index}
              where
                <if test="!var.local">
                  RES.PROC_INST_ID_ = A${index}.PROC_INST_ID_
                  <!-- When process instance variable is queried for, taskId should be null -->
                  and A${index}.TASK_ID_ is null
                </if>
                <if test="var.local">
                  RES.ID_ = A${index}.TASK_ID_
                </if>
                <if test="var.name != null">
                  <!-- Match-all variable-names when name is null -->
                  and A${index}.NAME_= #{var.name}
                </if>
                <if test="var.name == null">
                  and A${index}.NAME_ is not null
                </if>
                <if test="!var.type.equals('null')">
                  and A${index}.TYPE_ = #{var.type}
                </if>
                <!-- Variable value -->
                <if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
                  <choose>
                    <when test="var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')">
                      and lower(A${index}.TEXT_)
                    </when>
                    <otherwise>
                      and A${index}.TEXT_
                    </otherwise>
                  </choose>
                  <choose>
                    <when test="var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')">LIKE</when>
                    <otherwise><include refid="executionVariableOperator" /></otherwise>
                  </choose>
                  #{var.textValue}
                  <choose>
                    <when test="var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')">${wildcardEscapeClause}</when>
                  </choose>
                </if>
                <if test="var.textValue2 != null">
                  and A${index}.TEXT2_
                  <choose>
                    <when test="var.operator.equals('LIKE')">LIKE</when>
                    <otherwise><include refid="executionVariableOperator" /></otherwise>
                  </choose>
                  #{var.textValue2}
                  <choose>
                    <when test="var.operator.equals('LIKE')">${wildcardEscapeClause}</when>
                  </choose>
                </if>
                <if test="var.longValue != null">
                  and A${index}.LONG_
                  <include refid="executionVariableOperator" />
                  #{var.longValue}
                </if>
                <if test="var.doubleValue != null">
                  and A${index}.DOUBLE_
                  <include refid="executionVariableOperator" />
                  #{var.doubleValue}
                </if>
                <!-- Null variable type -->
                <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
              <choose>
                <when test="var.operator.equals('NOT_EQUALS')">
                  and (A${index}.TEXT_ is not null or A${index}.TEXT2_ is not null or A${index}.LONG_ is not null or A${index}.DOUBLE_ is not null or A${index}.BYTEARRAY_ID_ is not null)
                </when>
                <otherwise>
                  and A${index}.TEXT_ is null and A${index}.TEXT2_ is null and A${index}.LONG_ is null and A${index}.DOUBLE_ is null and A${index}.BYTEARRAY_ID_ is null
                </otherwise>
              </choose>
            </if>
            )
          </trim>
        </foreach>
        <if test="suspensionState != null">
          <if test="suspensionState.stateCode == 1">
            and RES.SUSPENSION_STATE_ = 1
          </if>
          <if test="suspensionState.stateCode == 2">
            and RES.SUSPENSION_STATE_ = 2
          </if>
        </if>
        <if test="tenantId != null">
          and RES.TENANT_ID_ = #{tenantId}
        </if>
        <if test="tenantIdLike != null">
          and RES.TENANT_ID_ like #{tenantIdLike}${wildcardEscapeClause}
        </if>
        <if test="withoutTenantId">
          and (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
        </if>
        <choose>
          <when test="bothCandidateAndAssigned">
              <!-- if dbIdentityUsed set true in process engine configuration -->
              <if test="userIdForCandidateAndAssignee != null">
                <if test="candidateGroups == null">
                  and (
                    RES.ASSIGNEE_ = #{userIdForCandidateAndAssignee}
                    OR (
                      RES.ASSIGNEE_ is null
                      AND EXISTS (
                        SELECT 1
                        from ${prefix}ACT_RU_IDENTITYLINK I
                        where
                          I.TASK_ID_ = RES.ID_
                          and I.TYPE_ = 'candidate'
                          and I.USER_ID_ = #{userIdForCandidateAndAssignee}
                      )
                    )
                  )
                </if>
              </if>
              <!-- if dbIdentityUsed set false in process engine configuration of using custom session factory of GroupIdentityManager -->
              <if test="candidateGroups != null">
                and (
                  RES.ASSIGNEE_ = #{userIdForCandidateAndAssignee}
                  OR (
                    RES.ASSIGNEE_ is null
                    AND EXISTS (
                      SELECT 1
                      from ${prefix}ACT_RU_IDENTITYLINK I
                      where
                        I.TASK_ID_ = RES.ID_
                        and I.TYPE_ = 'candidate'
                        and (
                          I.USER_ID_ = #{userIdForCandidateAndAssignee}
                          <if test="candidateGroups.size() &gt; 0">
                            or I.GROUP_ID_ IN
                            <foreach item="group" index="index" collection="candidateGroups" open="(" separator="," close=")">
                              #{group}
                            </foreach>
                          </if>
                        )
                    )
                  )
                )
              </if>
          </when>
        </choose>
        <foreach item="orQueryObject" index="orIndex" collection="orQueryObjects">
          and
          <trim prefix="(" prefixOverrides="OR" suffix=")">
            <if test="orQueryObject.taskId != null">
              RES.ID_ = #{orQueryObject.taskId}
            </if>
            <if test="orQueryObject.name != null">
              or RES.NAME_ = #{orQueryObject.name}
            </if>
            <if test="orQueryObject.nameLike != null">
              or RES.NAME_ like #{orQueryObject.nameLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.nameLikeIgnoreCase != null">
              or lower(RES.NAME_) like #{orQueryObject.nameLikeIgnoreCase}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.nameList != null &amp;&amp; orQueryObject.nameList.size() &gt; 0">
              or RES.NAME_ IN
              <foreach item="name" index="index" collection="orQueryObject.nameList"
                       open="(" separator="," close=")">
                #{name}
              </foreach>
            </if>
            <if test="orQueryObject.nameListIgnoreCase != null &amp;&amp; orQueryObject.nameListIgnoreCase.size() &gt; 0">
              or lower(RES.NAME_) IN
              <foreach item="name" index="index" collection="orQueryObject.nameListIgnoreCase"
                       open="(" separator="," close=")">
                #{name}
              </foreach>
            </if>
            <if test="orQueryObject.description != null">
              or RES.DESCRIPTION_ = #{orQueryObject.description}
            </if>
            <if test="orQueryObject.descriptionLike != null">
              or RES.DESCRIPTION_ like #{orQueryObject.descriptionLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.descriptionLikeIgnoreCase != null">
              or lower(RES.DESCRIPTION_) like #{orQueryObject.descriptionLikeIgnoreCase}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.priority != null">
              or RES.PRIORITY_ = #{orQueryObject.priority}
            </if>
            <if test="orQueryObject.minPriority != null">
              or RES.PRIORITY_ &gt;= #{orQueryObject.minPriority}
            </if>
            <if test="orQueryObject.maxPriority != null">
              or RES.PRIORITY_ &lt;= #{orQueryObject.maxPriority}
            </if>
            <if test="orQueryObject.assignee != null">
              or RES.ASSIGNEE_ = #{orQueryObject.assignee}
            </if>
            <if test="orQueryObject.assigneeLike != null">
              or RES.ASSIGNEE_ like #{orQueryObject.assigneeLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.assigneeLikeIgnoreCase != null">
              or lower(RES.ASSIGNEE_) like #{orQueryObject.assigneeLikeIgnoreCase}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.assigneeIds != null &amp;&amp; orQueryObject.assigneeIds.size() &gt; 0">
              or RES.ASSIGNEE_ IN
              <foreach item="assigneeId" index="index" collection="orQueryObject.assigneeIds"
                       open="(" separator="," close=")">
                #{assigneeId}
              </foreach>
            </if>
            <if test="orQueryObject.owner != null">
              or RES.OWNER_ = #{orQueryObject.owner}
            </if>
            <if test="orQueryObject.ownerLike != null">
              or RES.OWNER_ like #{orQueryObject.ownerLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.ownerLikeIgnoreCase != null">
              or RES.OWNER_ like #{orQueryObject.ownerLikeIgnoreCase}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.unassigned">
              or RES.ASSIGNEE_ IS NULL
            </if>
            <if test="orQueryObject.taskParentTaskId != null">
              or RES.PARENT_TASK_ID_ = #{orQueryObject.taskParentTaskId}
            </if>
            <if test="orQueryObject.noDelegationState">
              or RES.DELEGATION_ IS NULL
            </if>
            <if test="orQueryObject.delegationState != null">
              or RES.DELEGATION_ = #{orQueryObject.delegationStateString}
            </if>
            <if test="orQueryObject.processInstanceId != null">
              or RES.PROC_INST_ID_ = #{orQueryObject.processInstanceId}
            </if>
            <if test="orQueryObject.processInstanceIds != null &amp;&amp; orQueryObject.processInstanceIds.size() &gt; 0">
              or RES.PROC_INST_ID_ IN
              <foreach item="processInstance" index="index" collection="orQueryObject.processInstanceIds"
                       open="(" separator="," close=")">
                #{processInstance}
              </foreach>
            </if>
            <if test="orQueryObject.processInstanceBusinessKey != null">
              or <include refid="withoutJoins_selectExists">
              <property name="externalTable" value="${prefix}ACT_RU_EXECUTION E_OR${orIndex}"/>
              <property name="join" value="RES.PROC_INST_ID_ = E_OR${orIndex}.ID_"/>
              <property name="where" value="E_OR${orIndex}.BUSINESS_KEY_ = #{orQueryObject.processInstanceBusinessKey}"/>
            </include>
            </if>
            <if test="orQueryObject.processInstanceBusinessKeyLike != null">
              or <include refid="withoutJoins_selectExists">
              <property name="externalTable" value="${prefix}ACT_RU_EXECUTION E_OR${orIndex}"/>
              <property name="join" value="RES.PROC_INST_ID_ = E_OR${orIndex}.ID_"/>
              <property name="where" value="E_OR${orIndex}.BUSINESS_KEY_ like #{orQueryObject.processInstanceBusinessKeyLike}${wildcardEscapeClause}"/>
            </include>
            </if>
            <!-- TODO: original "orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null" had a bug -->
            <if test="orQueryObject.processInstanceBusinessKeyLikeIgnoreCase != null">
              or <include refid="withoutJoins_selectExists">
              <property name="externalTable" value="${prefix}ACT_RU_EXECUTION E_OR${orIndex}"/>
              <property name="join" value="RES.PROC_INST_ID_ = E_OR${orIndex}.ID_"/>
              <property name="where" value="lower(E_OR$.BUSINESS_KEY_) like #{orQueryObject.processInstanceBusinessKeyLikeIgnoreCase}${wildcardEscapeClause}"/>
            </include>
            </if>
            <if test="orQueryObject.executionId != null">
              or RES.EXECUTION_ID_ = #{orQueryObject.executionId}
            </if>
            <if test="orQueryObject.createTime != null">
              or RES.CREATE_TIME_ = #{orQueryObject.createTime}
            </if>
            <if test="orQueryObject.createTimeBefore != null">
              or RES.CREATE_TIME_ &lt; #{orQueryObject.createTimeBefore}
            </if>
            <if test="orQueryObject.createTimeAfter != null">
              or RES.CREATE_TIME_ &gt; #{orQueryObject.createTimeAfter}
            </if>
            <if test="orQueryObject.key != null">
              or RES.TASK_DEF_KEY_ = #{orQueryObject.key}
            </if>
            <if test="orQueryObject.keyLike != null">
              or RES.TASK_DEF_KEY_ like #{orQueryObject.keyLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.processDefinitionId != null">
              or RES.PROC_DEF_ID_ = #{orQueryObject.processDefinitionId}
            </if>
            <if test="orQueryObject.processDefinitionKey != null">
              or <include refid="withoutJoins_selectExists">
                <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D_OR${orIndex}"/>
                <property name="join" value="RES.PROC_DEF_ID_ = D_OR${orIndex}.ID_"/>
                <property name="where" value="D_OR${orIndex}.KEY_ = #{orQueryObject.processDefinitionKey}"/>
              </include>
            </if>
            <if test="orQueryObject.processDefinitionKeyLike != null">
              or <include refid="withoutJoins_selectExists">
                <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D_OR${orIndex}"/>
                <property name="join" value="RES.PROC_DEF_ID_ = D_OR${orIndex}.ID_"/>
                <property name="where" value="D_OR${orIndex}.KEY_ like #{orQueryObject.processDefinitionKeyLike}${wildcardEscapeClause}"/>
              </include>
            </if>
            <if test="orQueryObject.processDefinitionKeyLikeIgnoreCase != null">
              or <include refid="withoutJoins_selectExists">
                <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D_OR${orIndex}"/>
                <property name="join" value="RES.PROC_DEF_ID_ = D_OR${orIndex}.ID_"/>
                <property name="where" value="lower(D_OR${orIndex}.KEY_) like #{orQueryObject.processDefinitionKeyLikeIgnoreCase}${wildcardEscapeClause}"/>
              </include>
            </if>
            <if test="orQueryObject.processDefinitionKeys != null &amp;&amp; orQueryObject.processDefinitionKeys.size() &gt; 0">
              or <include refid="withoutJoins_selectExistsIn">
                <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D_OR${orIndex}"/>
                <property name="join" value="RES.PROC_DEF_ID_ = D_OR${orIndex}.ID_"/>
                <property name="field" value="D_OR${orIndex}.KEY_"/>
                <property name="collection" value="orQueryObject.processDefinitionKeys"/>
              </include>
            </if>
            <if test="orQueryObject.processDefinitionName != null">
              or <include refid="withoutJoins_selectExists">
                <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D_OR${orIndex}"/>
                <property name="join" value="RES.PROC_DEF_ID_ = D_OR${orIndex}.ID_"/>
                <property name="where" value="D_OR${orIndex}.NAME_ = #{orQueryObject.processDefinitionName}"/>
              </include>
            </if>
            <if test="orQueryObject.processDefinitionNameLike != null">
              or <include refid="withoutJoins_selectExists">
                <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D_OR${orIndex}"/>
                <property name="join" value="RES.PROC_DEF_ID_ = D_OR${orIndex}.ID_"/>
                <property name="where" value="D_OR${orIndex}.NAME_ like #{orQueryObject.processDefinitionNameLike}${wildcardEscapeClause}"/>
              </include>
            </if>
            <if test="orQueryObject.processCategoryInList != null &amp;&amp; orQueryObject.processCategoryInList.size() &gt; 0">
              or <include refid="withoutJoins_selectExistsIn">
                <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D_OR${orIndex}"/>
                <property name="join" value="RES.PROC_DEF_ID_ = D_OR${orIndex}.ID_"/>
                <property name="field" value="D_OR${orIndex}.CATEGORY_"/>
                <property name="collection" value="orQueryObject.processCategoryInList"/>
              </include>
            </if>
            <if test="orQueryObject.processCategoryNotInList != null &amp;&amp; orQueryObject.processCategoryNotInList.size() &gt; 0">
              or <include refid="withoutJoins_selectExistsNotIn">
                <property name="externalTable" value="${prefix}ACT_RE_PROCDEF D_OR${orIndex}"/>
                <property name="join" value="RES.PROC_DEF_ID_ = D_OR${orIndex}.ID_"/>
                <property name="field" value="D_OR${orIndex}.CATEGORY_"/>
                <property name="collection" value="orQueryObject.processCategoryNotInList"/>
              </include>
            </if>
            <if test="orQueryObject.deploymentId != null">
              or <include refid="withoutJoins_selectExists">
              <property name="externalTable" value="${prefix}ACT_RE_PROCDEF DEPLOY_P_OR${orIndex}"/>
              <property name="join" value="RES.PROC_DEF_ID_ = DEPLOY_P_OR${orIndex}.ID_"/>
              <property name="where" value="DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_ = #{orQueryObject.deploymentId}"/>
            </include>
            </if>
            <if test="orQueryObject.deploymentIds != null &amp;&amp; orQueryObject.deploymentIds.size() &gt; 0">
              or <include refid="withoutJoins_selectExistsIn">
              <property name="externalTable" value="${prefix}ACT_RE_PROCDEF DEPLOY_P_OR${orIndex}"/>
              <property name="join" value="RES.PROC_DEF_ID_ = DEPLOY_P_OR${orIndex}.ID_"/>
              <property name="field" value="DEPLOY_P_OR${orIndex}.DEPLOYMENT_ID_"/>
              <property name="collection" value="orQueryObject.deploymentIds"/>
            </include>
            </if>
            <if test="orQueryObject.dueDate != null">
              or RES.DUE_DATE_ = #{orQueryObject.dueDate}
            </if>
            <if test="orQueryObject.dueBefore != null">
              or (RES.DUE_DATE_ &lt; #{orQueryObject.dueBefore} and RES.DUE_DATE_ is not null)
            </if>
            <if test="orQueryObject.dueAfter != null">
              or (RES.DUE_DATE_ &gt; #{orQueryObject.dueAfter} and RES.DUE_DATE_ is not null)
            </if>
            <if test="orQueryObject.withoutDueDate">
              or RES.DUE_DATE_ is null
            </if>
            <if test="orQueryObject.category != null">
              or RES.CATEGORY_ = #{orQueryObject.category}
            </if>
            <if test="orQueryObject.excludeSubtasks">
              or RES.PARENT_TASK_ID_ IS NULL
            </if>
            <if test="!orQueryObject.bothCandidateAndAssigned &amp;&amp; (orQueryObject.candidateUser != null || orQueryObject.candidateGroups != null)">
              or exists (
                select 1
                from ${prefix}ACT_RU_IDENTITYLINK I_OR${orIndex}
                where
                  I_OR${orIndex}.TASK_ID_ = RES.ID_
                  and RES.ASSIGNEE_ is null
                  and I_OR${orIndex}.TYPE_ = 'candidate'
                  and (
                    <if test="orQueryObject.candidateUser != null">
                      I_OR${orIndex}.USER_ID_ = #{orQueryObject.candidateUser}
                    </if>
                    <if test="orQueryObject.candidateUser != null &amp;&amp; orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0">
                      or
                    </if>
                    <if test="orQueryObject.candidateGroups != null &amp;&amp; orQueryObject.candidateGroups.size() &gt; 0">
                    I_OR${orIndex}.GROUP_ID_ IN
                    <foreach item="group" index="index" collection="orQueryObject.candidateGroups"
                             open="(" separator="," close=")">
                      #{group}
                    </foreach>
                  </if>
                  )
              )
            </if>
            <if test="orQueryObject.involvedUser != null">
              or (
              exists (
              select 1
              from ${prefix}ACT_RU_IDENTITYLINK LINK
              where
              LINK.TASK_ID_ = RES.ID_
              and LINK.USER_ID_ = #{orQueryObject.involvedUser}
              )
              or RES.ASSIGNEE_ = #{orQueryObject.involvedUser}
              or RES.OWNER_ = #{orQueryObject.involvedUser}
              )
            </if>
            <if test="orQueryObject.involvedGroups != null &amp;&amp; orQueryObject.involvedGroups.size() &gt; 0">
              or (
                EXISTS (
                  SELECT 1
                  FROM ${prefix}ACT_RU_IDENTITYLINK I_OR${orIndex}
                  WHERE
                    I_OR${orIndex}.TASK_ID_ = RES.ID_
                    and I_OR${orIndex}.TYPE_ = 'participant'
                    and I_OR${orIndex}.GROUP_ID_ IN
                    <foreach item="group" index="index" collection="orQueryObject.involvedGroups" open="(" separator="," close=")">
                  #{group}
                </foreach>
                )
              )
            </if>
            <if test="orQueryObject.queryVariableValues.size() &gt; 0">
              <foreach item="var" collection="orQueryObject.queryVariableValues" index="index">
                <choose>
                  <when test="var.local">
                    <bind name="alias" value="'A_L_OR'"/>
                  </when>
                  <otherwise>
                    <bind name="alias" value="'A_OR'"/>
                  </otherwise>
                </choose>
                or exists (
                  select 1
                  from ${prefix}ACT_RU_VARIABLE ${alias}${orIndex}
                  where
                    <choose>
                      <when test="var.local">
                        RES.ID_ = ${alias}${orIndex}.TASK_ID_
                      </when>
                      <otherwise>
                        RES.PROC_INST_ID_ = ${alias}${orIndex}.PROC_INST_ID_
                        <!-- When process instance variable is queried for, taskId should be null -->
                        and ${alias}${orIndex}.TASK_ID_ is null
                      </otherwise>
                    </choose>
                    and
                    <trim prefix="(" prefixOverrides="AND" suffix=")">
                      <if test="var.name != null">
                        <!-- Match-all variable-names when name is null -->
                        and ${alias}${orIndex}.NAME_= #{var.name}
                      </if>
                      <!-- TODO: is this a bug? -->
                      <if test="var.name == null">
                        and ${alias}${orIndex}.NAME_ is not null
                      </if>
                      <if test="!var.type.equals('null')">
                        and ${alias}${orIndex}.TYPE_ = #{var.type}
                      </if>
                      <!-- Variable value -->
                      <if test="var.textValue != null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
                        <choose>
                          <when test="var.operator.equals('EQUALS_IGNORE_CASE') || var.operator.equals('NOT_EQUALS_IGNORE_CASE') || var.operator.equals('LIKE_IGNORE_CASE')">
                            and lower(${alias}${orIndex}.TEXT_)
                          </when>
                          <otherwise>
                            and ${alias}${orIndex}.TEXT_
                          </otherwise>
                        </choose>
                        <choose>
                          <when test="var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')">LIKE</when>
                          <otherwise><include refid="executionVariableOperator" /></otherwise>
                        </choose>
                        #{var.textValue}
                        <choose>
                          <when test="var.operator.equals('LIKE') || var.operator.equals('LIKE_IGNORE_CASE')">${wildcardEscapeClause}</when>
                        </choose>
                      </if>
                      <if test="var.textValue2 != null">
                        and ${alias}${orIndex}.TEXT2_
                        <choose>
                          <when test="var.operator.equals('LIKE')">LIKE</when>
                          <otherwise><include refid="executionVariableOperator" /></otherwise>
                        </choose>
                        #{var.textValue2}
                        <choose>
                          <when test="var.operator.equals('LIKE')">${wildcardEscapeClause}</when>
                        </choose>
                      </if>
                      <if test="var.longValue != null">
                        and ${alias}${orIndex}.LONG_
                        <include refid="executionVariableOperator" />
                        #{var.longValue}
                      </if>
                      <if test="var.doubleValue != null">
                        and ${alias}${orIndex}.DOUBLE_
                        <include refid="executionVariableOperator" />
                        #{var.doubleValue}
                      </if>
                      <!-- Null variable type -->
                      <if test="var.textValue == null &amp;&amp; var.textValue2 == null &amp;&amp; var.longValue == null &amp;&amp; var.doubleValue == null">
                        <choose>
                          <when test="var.operator.equals('NOT_EQUALS')">
                            and (${alias}${orIndex}.TEXT_ is not null or ${alias}${orIndex}.TEXT2_ is not null or ${alias}${orIndex}.LONG_ is not null or ${alias}${orIndex}.DOUBLE_ is not null or ${alias}${orIndex}.BYTEARRAY_ID_ is not null)
                          </when>
                          <otherwise>
                            and ${alias}${orIndex}.TEXT_ is null and ${alias}${orIndex}.TEXT2_ is null and ${alias}${orIndex}.LONG_ is null and ${alias}${orIndex}.DOUBLE_ is null and ${alias}${orIndex}.BYTEARRAY_ID_ is null
                          </otherwise>
                        </choose>
                      </if>
                    </trim>
                )
              </foreach>
            </if>
            <if test="orQueryObject.suspensionState != null">
              <if test="orQueryObject.suspensionState.stateCode == 1">
                or RES.SUSPENSION_STATE_ = 1
              </if>
              <if test="orQueryObject.suspensionState.stateCode == 2">
                or RES.SUSPENSION_STATE_ = 2
              </if>
            </if>
            <if test="orQueryObject.tenantId != null">
              or RES.TENANT_ID_ = #{orQueryObject.tenantId}
            </if>
            <if test="orQueryObject.tenantIdLike != null">
              or RES.TENANT_ID_ like #{orQueryObject.tenantIdLike}${wildcardEscapeClause}
            </if>
            <if test="orQueryObject.withoutTenantId">
              or (RES.TENANT_ID_ = '' or RES.TENANT_ID_ is null)
            </if>
            <choose>
              <when test="orQueryObject.bothCandidateAndAssigned">
                    <!-- if dbIdentityUsed set true in process engine configuration -->
                    <if test="orQueryObject.userIdForCandidateAndAssignee != null">
                      <if test="orQueryObject.candidateGroups == null ">
                        or RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}
                        or exists (
                          select 1
                          from ${prefix}ACT_RU_IDENTITYLINK I_OR${orIndex}
                          where
                            I_OR${orIndex}.TASK_ID_ = RES.ID_
                            and RES.ASSIGNEE_ is null
                            and I_OR${orIndex}.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}
                        )
                      </if>
                    </if>
                    <!-- if dbIdentityUsed set false in process engine configuration of using custom session factory of GroupIdentityManager -->
                    <if test="orQueryObject.candidateGroups != null">
                      or (
                        RES.ASSIGNEE_ = #{orQueryObject.userIdForCandidateAndAssignee}
                        OR (
                          RES.ASSIGNEE_ is null
                          AND EXISTS (
                            SELECT 1
                            from ${prefix}ACT_RU_IDENTITYLINK I_OR${orIndex}
                            where
                              I_OR${orIndex}.TASK_ID_ = RES.ID_
                              and I_OR${orIndex}.TYPE_ = 'candidate'
                              and (
                                I_OR${orIndex}.USER_ID_ = #{orQueryObject.userIdForCandidateAndAssignee}
                                <if test="orQueryObject.candidateGroups.size() &gt; 0">
                                  or I_OR${orIndex}.GROUP_ID_ IN
                                  <foreach item="group" index="index" collection="orQueryObject.candidateGroups" open="(" separator="," close=")">
                                    #{group}
                                  </foreach>
                                </if>
                              )
                          )
                        )
                      )
                    </if>
              </when>
            </choose>
          </trim>
        </foreach>
      </where>
    ) SUB
  </sql>

  <sql id="withoutJoins_selectExists">
    exists (
      select 1
      from ${externalTable}
      where
        ${join}
        and ${where}
    )
  </sql>

  <sql id="withoutJoins_selectExistsIn">
    exists (
      select 1
      from ${externalTable}
      where
        ${join}
        and ${field} in
        <foreach item="item" index="index" collection="${collection}" open="(" separator="," close=")">
          #{item}
        </foreach>
    )
  </sql>

  <sql id="withoutJoins_selectExistsNotIn">
    exists (
      select 1
      from ${externalTable}
      where
        ${join}
        and ${field} not in
        <foreach item="item" index="index" collection="${collection}" open="(" separator="," close=")">
          #{item}
        </foreach>
    )
  </sql>

</mapper>
