name: PR - Validate and Build

permissions: read-all

on:
  pull_request:
    branches:
      - develop
    types:
      - opened
      - reopened
      - synchronize
      - labeled
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  pre-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Check dependabot build
        uses: ./.github/actions/check-ext-build
      - name: pre-commit
        uses: Alfresco/alfresco-build-tools/.github/actions/pre-commit@f37c44cc085236178ebb8834eb634b0b4b550a40 # v8.23.0
        with:
          skip_checkout: true
      - name: Ensure SHA pinned actions
        uses: zgosalvez/github-actions-ensure-sha-pinned-actions@fc87bb5b5a97953d987372e74478de634726b3e5 # v3.0.25

  build:
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup Java JDK 21
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # 4.7.1
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Set preview version
        if: ${{ contains(github.event.pull_request.labels.*.name, 'preview') }}
        run: |
          GITHUB_PR_NUMBER=PR-${{ github.event.pull_request.number }}
          echo 0.0.1-${GITHUB_PR_NUMBER}-${GITHUB_RUN_NUMBER}-SNAPSHOT > VERSION

      - name: Set VERSION env variable
        if: ${{ contains(github.event.pull_request.labels.*.name, 'preview') }}
        run: |
          VERSION=$(cat VERSION)
          echo set VERSION=$VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update pom files to the new version
        if: ${{ contains(github.head_ref, 'preview') || contains(github.event.pull_request.labels.*.name, 'preview') }}
        run: mvn -B versions:set -DnewVersion=$VERSION -DprocessAllModules=true -DgenerateBackupPoms=false

      - name: Define Maven Command
        id: define_maven_command
        shell: bash
        run: |
          if [ $DO_PUSH == 'true' ]
          then
            echo "command=deploy" >> $GITHUB_OUTPUT
          else
            echo "command=verify" >> $GITHUB_OUTPUT
          fi
        env:
          DO_PUSH: ${{ contains(github.event.pull_request.labels.*.name, 'preview') }}

      - name: Build and Test with Maven (and maybe Deploy)
        shell: bash
        run: mvn ${{ steps.define_maven_command.outputs.command }} -P integration-test ${{ env.MAVEN_CLI_OPTS }}
        env:
          MAVEN_CLI_OPTS: --show-version --no-transfer-progress --settings settings.xml
          MAVEN_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Find and merge all JaCoCo .exec files
        shell: bash
        run: |
          mkdir -p target/jacoco-merged
          find . -type f \( -name "jacoco.exec" -o -name "jacoco-it.exec" \) -path "*/target/*" > exec-files.txt
          echo "Merging the following .exec files:"
          cat exec-files.txt
          mvn -N jacoco:merge \
            -Djacoco.destFile=target/jacoco-merged/jacoco-merged.exec \
            -Djacoco.dataFileFiles=$(paste -sd "," exec-files.txt)

      - name: Generate JaCoCo XML report from merged .exec
        shell: bash
        run: |
          # Use jacoco:report-aggregate to generate proper multi-module report
          mvn jacoco:report-aggregate \
            -Djacoco.dataFile=target/jacoco-merged/jacoco-merged.exec

      - name: Set JaCoCo report path
        run: |
          # Look for the aggregate report first, then fallback to individual reports
          if [ -f "target/site/jacoco-aggregate/jacoco.xml" ]; then
            echo "JACOCO_REPORT_PATH=target/site/jacoco-aggregate/jacoco.xml" >> $GITHUB_ENV
          else
            echo "JACOCO_REPORT_PATH=target/site/jacoco/jacoco.xml" >> $GITHUB_ENV
          fi

      - name: Set SONAR_SCANNER_OPTS
        id: set_sonar_opts
        shell: bash
        run: |
          # Find all JaCoCo XML reports with actual coverage data
          REPORT_PATHS=$(find . -path "*/target/site/jacoco*/jacoco.xml" -exec grep -l "<package" {} \; 2>/dev/null | paste -sd "," -)
          if [ -z "$REPORT_PATHS" ]; then
            echo "No JaCoCo reports with coverage data found"
            REPORT_PATHS=""
          fi
          echo "SONAR_SCANNER_OPTS=sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.organization=activiti \
            -Dsonar.projectKey=Activiti_Activiti \
            -Dsonar.coverage.jacoco.xmlReportPaths=${REPORT_PATHS}" >> $GITHUB_ENV
          echo "report_paths=$REPORT_PATHS" >> $GITHUB_OUTPUT

      - name: Debug - Check generated files
        shell: bash
        run: |
          echo "=== Checking for JaCoCo files ==="
          find . -name "jacoco.xml" -type f | head -20
          find . -name "*.exec" -type f | head -20
          echo "=== Checking target directories ==="
          ls -la target/ 2>/dev/null || echo "No target directory"
          ls -la target/site/ 2>/dev/null || echo "No target/site directory"
          ls -la target/site/jacoco* 2>/dev/null || echo "No jacoco directories in target/site"

      - name: SonarCloud Scan
        run: mvn ${{ env.SONAR_SCANNER_OPTS }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Echo Longest Test Run
        uses: ./.github/actions/echo-longest-run
